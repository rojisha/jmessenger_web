import React from "react";
import { HiOutlineSearch as SearchIcon } from "react-icons/hi";
import { RxCross2 as CrossIcon } from "react-icons/rx";

type Props = Required<typeof SearchBar.defaultProps> & {
  /* extra props here*/
};

type State = {
  inputText: string;
  innerBorderColor: string;
  outerBorderColor: string;
  searchIconColor: string;
  crossIconColor: string;
  crossIconOnActive: string;
};

interface myInterface {
  inputReference: React.RefObject<HTMLInputElement>;
}
export default class SearchBar
  extends React.Component<Props, State>
  implements myInterface
{
  static defaultProps = {};
  constructor(props: Props) {
    super(props);
    this.handleFocus = this.handleFocus.bind(this);
    this.doHighlight = this.doHighlight.bind(this);
    this.doGrayout = this.doGrayout.bind(this);
    this.inputReference = React.createRef<HTMLInputElement>();
  }
  state = {
    inputText: "",
    innerBorderColor: "gray-300/90",
    outerBorderColor: "transparent",
    searchIconColor: "gray-500/70",
    crossIconColor: "transparent",
    crossIconOnActive: "active:bg-transparent",
  };

  inputReference;
  componentDidMount() {
    document.addEventListener("mousedown", this.handleFocus);
  }
  componentWillUnmount() {
    document.removeEventListener("mousedown", this.handleFocus);
  }

  doHighlight() {
    this.setState((prev) => {
      const crossIconColor =
        prev.inputText === "" ? "transparent" : "highlight-color";
      return {
        innerBorderColor: "transparent",
        outerBorderColor: "highlight-color",
        searchIconColor: "highlight-color",
        crossIconColor: crossIconColor,
      };
    });
  }

  doGrayout() {
    this.setState((prev) => {
      const crossIconColor =
        prev.inputText === "" ? "transparent" : "gray-300/90";
      return {
        innerBorderColor: "gray-300/90",
        outerBorderColor: "transparent",
        searchIconColor: "gray-500/70",
        crossIconColor: crossIconColor,
      };
    });
  }

  handleFocus(e: any) {
    const container = this.inputReference.current;
    const target = e.target as Node;
    this.doHighlight();
    if (container && !container.contains(target)) {
      this.doGrayout();
    }
  }

  render() {
    return (
      <div
        className={
          "border-[2px] border-solid rounded-full mt-5" +
          " " +
          "border-" +
          this.state.outerBorderColor
        }
      >
        <div
          id="border"
          className={
            "min-h-[43px] flex flex-row items-center bg-white border border-solid rounded-full" +
            " " +
            "border-" +
            this.state.innerBorderColor
          }
        >
          <label htmlFor="search" className=" mt-[5px]">
            <SearchIcon
              className={
                "w-[22px] h-auto ml-[12px] mr-[12px] rounded-full" +
                " " +
                "text-" +
                this.state.searchIconColor +
                " "
              }
            />
          </label>

          <input
            id="search"
            ref={this.inputReference}
            type="text"
            autoComplete="off"
            value={this.state.inputText}
            onFocus={this.handleFocus}
            onChange={(e) => {
              const crossIconColor =
                e.target.value === "" ? "transparent" : "hightlight-color";
              const crossIconOnActive = crossIconColor + "/10";
              this.setState({
                inputText: e.target.value,
                crossIconColor: crossIconColor,
                crossIconOnActive: crossIconOnActive,
              });
            }}
            placeholder="Search"
            className=" w-full self-center  text-base font-medium font-sans placeholder-gray-500/70 border-none outline-none m-0 p-0 "
          />
          <CrossIcon
            onClick={() => {
              this.setState({ inputText: "", crossIconColor: "transparent" });
            }}
            className={
              "min-w-[25px] h-auto ml-[12px] mr-[7px] p-[4px] rounded-full" +
              " " +
              this.state.crossIconOnActive +
              " " +
              "text-" +
              this.state.searchIconColor +
              " " +
              "text-" +
              this.state.crossIconColor +
              " "
            }
          />
        </div>
      </div>
    );
  }
}
